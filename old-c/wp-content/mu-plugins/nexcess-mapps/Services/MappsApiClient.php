<?php

namespace Nexcess\MAPPS\Services;

use Nexcess\MAPPS\Exceptions\RequestException;
use Nexcess\MAPPS\Exceptions\WPErrorException;
use Nexcess\MAPPS\Settings;

use const Nexcess\MAPPS\PLUGIN_VERSION;

class MappsApiClient {

	/**
	 * @var \Nexcess\MAPPS\Settings
	 */
	private $settings;

	/**
	 * Construct the API client instance.
	 *
	 * @param \Nexcess\MAPPS\Settings $settings The Settings object for this site.
	 */
	public function __construct( Settings $settings ) {
		$this->settings = $settings;
	}

	/**
	 * Construct the full URI to an API route.
	 *
	 * @param string $route The API endpoint.
	 *
	 * @return string The absolute URI for this route.
	 */
	public function route( $route = '/' ) {
		// Strip leading slashes.
		if ( 0 === mb_strpos( $route, '/' ) ) {
			$route = mb_substr( $route, 1 );
		}

		return esc_url_raw( sprintf( '%s/api/%2$s', $this->settings->managed_apps_endpoint, $route ) );
	}

	/**
	 * Validate an automatic login request with the MAPPS API, returning the username if successful.
	 *
	 * @param string $token The automatic login token generated by NocWorx.
	 *
	 * @throws RequestException Thrown if the API request fails with a status other than 404 or 422.
	 *
	 * @return string The username returned by NocWorx, or an empty string if unsuccessful.
	 */
	public function validateAutoLogin( $token ) {
		try {
			$response = $this->request( 'v1/site/sso-verify', [
				'method' => 'POST',
				'body'   => [
					'token' => esc_js( $token ), // since this becomes JSON, esc_js works fairly nicely.
				],
			] );

			$status = (int) wp_remote_retrieve_response_code( $response );

			if ( in_array( $status, [ 404, 422 ], true ) ) {
				return '';
			}

			if ( 300 <= $status ) {
				throw new RequestException( sprintf(
					'Received unexpected response code (%d) while attempting to validate auto login',
					$status
				) );
			}

			$body = (array) json_decode( wp_remote_retrieve_body( $response ), true );

			if ( ! isset( $body['admin_username'] ) || ! is_string( $body['admin_username'] ) ) {
				return '';
			}

			return $body['admin_username'];
		} catch ( RequestException $e ) {
			throw $e;
		} catch ( \Exception $e ) {
			throw new RequestException( $e->getMessage(), $e->getCode(), $e );
		}
	}

	/**
	 * Make a request to the Nexcess API to change the domain of the current site.
	 *
	 * @param string $domain
	 *
	 * @throws RequestException If an error occurs making the request.
	 *
	 * @return true Returns true if the request to change the domain was accepted. Otherwise, will throw an error.
	 */
	public function renameDomain( $domain ) {
		try {
			$this->request( 'v1/site/rename', [
				'method' => 'POST',
				'body'   => [
					'domain' => $domain,
				],
			] );
		} catch ( WPErrorException $e ) {
			throw new RequestException( 'Received an unexpected response while attempting change the site\'s domain.', $e->getCode(), $e );
		}

		return true;
	}

	/**
	 * Send the provided domain to API to confirm it's usable for the site.
	 *
	 * @param string $domain
	 *
	 * @throws RequestException Thrown if the API request fails with a status other than 404 or 422.
	 *
	 * @return array The data returned by NocWorx, or an empty array if unsuccessful.
	 */
	public function checkDomainUsable( $domain ) {
		$request_url = sprintf( 'v1/domain/usable/%s', $domain );

		try {
			$response = $this->request( $request_url, [
				'method' => 'GET',
			] );

			$status = (int) wp_remote_retrieve_response_code( $response );

			if ( in_array( $status, [ 404, 422 ], true ) ) {
				return [];
			}

			$body = json_decode( wp_remote_retrieve_body( $response ), true );

			$data = [
				'domain' => $domain,
			];

			// Return all properties from response body.
			foreach ( $body as $prop => $value ) {
				$data[ $prop ] = $value;
			}

			return $data;
		} catch ( RequestException $e ) {
			throw $e;
		} catch ( \Exception $e ) {
			throw new RequestException( $e->getMessage(), $e->getCode(), $e );
		}
	}

	/**
	 * Send a request to the MAPPS API.
	 *
	 * @param string  $endpoint The API endpoint.
	 * @param mixed[] $args     Optional. WP HTTP API arguments, which will be merged with defaults.
	 *                          {@link https://developer.wordpress.org/reference/classes/WP_Http/request/#parameters}.
	 *
	 * @throws WPErrorException If an error occurs making the request.
	 *
	 * @return Array<string,mixed> An array containing the following keys: 'headers', 'body', 'response', 'cookies',
	 *                             and 'filename'. This is the same as {@see \WP_HTTP::request()}
	 */
	protected function request( $endpoint, $args = [] ) {
		$response = wp_remote_request(
			$this->route( $endpoint ),
			array_replace_recursive([
				'user-agent' => sprintf( 'NexcessMAPPS/%1$s', PLUGIN_VERSION ),
				'timeout'    => 30,
				'headers'    => [
					'Accept'        => 'application/json',
					'X-MAAPI-TOKEN' => $this->settings->managed_apps_token,
				],
			], $args)
		);

		if ( is_wp_error( $response ) ) {
			throw new WPErrorException( $response );
		}

		return $response;
	}

	/**
	 * Purge Nexcess-controlled caches (nginx micro-cache, CDN) for a site.
	 *
	 * @throws RequestException If the request fails.
	 *
	 * @return self
	 */
	public function purgeCaches() {
		try {
			$response = $this->request('v1/site/purge', [
				'method' => 'POST',
			]);
			$status   = (int) wp_remote_retrieve_response_code( $response );

			if ( 300 <= $status ) {
				throw new RequestException(sprintf(
					'Received unexpected response code (%d) while attempting to purge site caches',
					$status
				));
			}
		} catch ( RequestException $e ) {
			throw $e;
		} catch ( \Exception $e ) {
			throw new RequestException( $e->getMessage(), $e->getCode(), $e );
		}

		return $this;
	}

	/**
	 * Inform Nocworx that initial account setup is complete.
	 *
	 * @throws RequestException If the request fails.
	 *
	 * @return bool
	 */
	public function siteSetupComplete() {
		try {
			$response = $this->request( 'v1/operation', [
				'method' => 'POST',
				'body'   => [
					'action' => 'cloud-account:account:initial-setup:completed',
					'state'  => 'success',
				],
			] );

			$status = (int) wp_remote_retrieve_response_code( $response );

			if ( 202 !== $status ) {
				throw new RequestException(sprintf(
					'Received unexpected response code (%d) while attempting to complete initial site setup.',
					$status
				));
			}

			return true;

		} catch ( RequestException $e ) {
			throw $e;
		} catch ( \Exception $e ) {
			throw new RequestException( $e->getMessage(), $e->getCode(), $e );
		}
	}

	/**
	 * Checks if initial site setup is complete.
	 *
	 * @throws RequestException If the request fails.
	 *
	 * @return mixed
	 */
	public function isSiteSetupComplete() {
		try {
			$response = $this->request( 'v1/operation?filter[action]=cloud-account:account:initial-setup:completed', [
				'method' => 'GET',
			]);

			if ( 0 === count( $response ) ) {
				throw new RequestException(sprintf(
					'Received unexpected response while attempting to check if initial site setup was complete.'
				));
			}

			// Parse the response as JSON and force it to an associative array so we can use wp_list_pluck.
			return (array) json_decode( wp_remote_retrieve_body( $response ), true );

		} catch ( RequestException $e ) {
			throw $e;
		} catch ( \Exception $e ) {
			throw new RequestException( $e->getMessage(), $e->getCode(), $e );
		}
	}
}
